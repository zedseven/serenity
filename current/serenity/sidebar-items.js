initSidebarItems({"attr":[["async_trait",""]],"enum":[["Error","A common error enum returned by most of the library’s functionality within a custom [`Result`]."]],"mod":[["builder","A set of builders used to make using methods on certain structs simpler to use."],["cache","A cache containing data received from `Shard`s."],["client","The Client contains information about a single bot’s token, as well as event handlers. Dispatching events to configured handlers and starting the shards’ connections are handled directly via the client. In addition, the `http` module and `Cache` are also automatically handled by the Client module for you."],["collector","Collectors will receive events from the contextual shard, check if the filter lets them pass, and collects if the receive, collect, or time limits are not reached yet."],["constants","A set of constants used by the library."],["framework","The framework is a customizable method of separating commands."],["gateway","The gateway module contains the pieces - primarily the `Shard` - responsible for maintaining a WebSocket connection with Discord."],["http","The HTTP module which provides functions for performing requests to endpoints in Discord’s API."],["model","Mappings of objects received from the API, with optional helper methods for ease of use."],["prelude","A set of exports which can be helpful to use."],["utils","A set of utilities to help with common use cases that are not required to fully use the library."]],"struct":[["CacheAndHttp",""]],"trait":[["FutureExt","An extension trait for `Future`s that provides a variety of convenient adapters."]],"type":[["Result","The common result type between most library functions."]]});